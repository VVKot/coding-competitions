from collections import defaultdict
from typing import List, DefaultDict


class Solution:

    def minMalwareSpread(self,
                         graph: List[List[int]],
                         initial: List[int]) -> int:
        parents = self.union_find(graph)
        sizes = self.get_sizes(parents)
        infected = self.get_infected_count(parents, initial)
        result = len(parents) + 1
        max_size = -1
        for vertex in initial:
            component = parents[vertex]
            count = infected[component]
            size = sizes[component] if count == 1 else 0
            if size > max_size:
                max_size = size
                result = vertex
            elif size == max_size:
                result = min(result, vertex)
        return result

    def union_find(self, graph: List[List[int]]) -> List[int]:
        N = len(graph)
        parents = list(range(N))

        def find(i):
            if i == parents[i]:
                return i
            parents[i] = find(parents[i])
            return parents[i]

        for y, row in enumerate(graph):
            for x, num in enumerate(row):
                if num:
                    par_y = find(y)
                    par_x = find(x)
                    parents[par_x] = par_y
        return parents

    def get_sizes(self, parents: List[int]) -> DefaultDict[int, int]:
        sizes = defaultdict(int)  # type: DefaultDict[int, int]
        for parent in parents:
            sizes[parent] += 1
        return sizes

    def get_infected_count(self,
                           parents: List[int],
                           initial: List[int]) -> DefaultDict[int, int]:
        infected = defaultdict(int)  # type: DefaultDict[int, int]
        for vertex in initial:
            parent = parents[vertex]
            infected[parent] += 1
        return infected
