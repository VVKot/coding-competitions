from collections import Counter
from typing import List


class Solution:

    def minMalwareSpread(self,
                         graph: List[List[int]],
                         initial: List[int]) -> int:
        parents = self.union_find(graph)
        sizes = Counter(parents)
        infected = Counter(parents[i] for i in initial)
        result = min(initial)
        max_size = -1
        for vertex in initial:
            component = parents[vertex]
            count = infected[component]
            if count == 1:
                size = sizes[component]
                if size > max_size:
                    max_size = size
                    result = vertex
                elif size == max_size:
                    result = min(result, vertex)
        return result

    def union_find(self, graph: List[List[int]]) -> List[int]:
        N = len(graph)
        parents = list(range(N))

        def find(i):
            if i == parents[i]:
                return i
            parents[i] = find(parents[i])
            return parents[i]

        for y, row in enumerate(graph):
            for x, num in enumerate(row):
                if num:
                    par_y = find(y)
                    par_x = find(x)
                    parents[par_x] = par_y
        return parents
